pipeline {
    agent any
        stages {
            stage('Parameters'){
                steps {
                    script {
                    properties([
                            parameters([
                            string(
                                //defaultValue: 'JIRA_ISSUE_KEY', 
                                name: 'JIRA_ISSUE_KEY', 
                                description: "Seleccionar el Jira issue Key  vinculado al despliegue de este Pipeline",
                                trim: true
                            ),
                            booleanParam(
                                defaultValue: false, 
                                description: 'Habilitar cuando el JIRA_ISSUE_KEY seleccionado anteriormente sea el mismo que se uso para el despliegue del pipeline en el ambiente de integración', 
                                name: 'JIRA_ISSUE_KEY_VALIDATION'
                            ),
                            [$class: 'CascadeChoiceParameter', 
                             choiceType: 'PT_SINGLE_SELECT', 
                             description: 'Seleccionar el  jira issue key vinculado al  jira issue key de integración',
                             name: 'JIRA_INT_ISSUE_KEY', 
                             referencedParameters: 'JIRA_ISSUE_KEY,JIRA_ISSUE_KEY_VALIDATION', 
                             script: 
                                [$class: 'GroovyScript', 
                                 fallbackScript: [
                                  classpath: [], 
                                  sandbox: false,
                                  script: "return ['error']"], 
                                  script: [
                                    classpath: [], 
                                    sandbox: false, 
                                    script: '''

                                    import hudson.model.*
                                    import hudson.tools.*
                                    import java.util.logging.Logger
                                    import jenkins.*
                                    import jenkins.model.*
                                    import org.jenkinsci.plugins.scriptler.config.*
                                    import org.jenkinsci.plugins.scriptler.*


                                    if (JIRA_ISSUE_KEY_VALIDATION){
                                    return [] ;
                                    }

                                    Logger logger = Logger.getLogger("")

                                    def keyCredentialId = "jira-user-password-edwin083"

                                    logger.info('Accessing Jira api token')
                                    def creds = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
                                        com.cloudbees.plugins.credentials.Credentials.class,
                                    )

                                    def JIRA_USER
                                    def JIRA_PASS

                                    for (c in creds) {
                                    if (c.id == keyCredentialId) {
                                        JIRA_USER = c.username
                                        JIRA_PASS = c.password
                                        break
                                    }
                                    }

                                    def ENCODED_PASSWORD="${JIRA_USER}:${JIRA_PASS}".bytes.encodeBase64().toString()

                                    try {
                                        links=executeShell("""
                                        data=\\$( curl -s --location \\
                                        --request GET "https://edwin083.atlassian.net/rest/api/2/issue/${JIRA_ISSUE_KEY}?fields=issuelinks" \\
                                        --header 'Authorization: Basic ${ENCODED_PASSWORD}')

                                        echo \\$data | jq  -r '.fields.issuelinks' | jq -r ".[] | .inwardIssue.key" | grep -v "null"
                                        echo \\$data | jq  -r '.fields.issuelinks' | jq -r ".[] | .outwardIssue.key" | grep -v "null"

                                    """)
                                        arraylinks = links.readLines()
                                        arraylinksFinal = (arraylinks.isEmpty()) ? ['No Linked Jira Issue found'] : arraylinks
                                        return arraylinksFinal
                                    } catch (Exception e) {
                                        println (e)
                                    }

                                    // Only allow execute one command line or call an script.sh
                                    def executeShell (String command) {
                                        def sout = new StringBuffer(), serr = new StringBuffer()
                                        def proc = ['bash', '-c', command].execute()
                                        proc.waitForProcessOutput(sout, serr)
                                        println(serr)
                                        println(sout)
                                        return sout
                                    }
                                    }
                                    '''
                                            ]
                                    ]
                                ]
                            ])
                        ])
                    }
                }
            }
        }   
}